
@ 프로그래밍 언어, 스크립팅 언어, 마크업언어 차이

프로그래밍 언어 : C, C++, C#, java ..
스크립팅 언어 : javascript, php, sql ..
마크업 언어: HTML, CSS ...

프로그래밍 언어는 컴파일되어서 배포할때는 바이너리코드를 배포한다.
원본코드는 배포할 필요가 없다.
하지만 이러면 개발환경과 실행환경이 달라지고, 
프로그램이 제대로 동작하지 않을수있다.
(모던 프로그래밍에서는 솔루션이 있긴하다)

따라서 스크립팅 언어를 만들었고,
스크립팅 언어는 배포시에 바이너리코드가 아니라 소스코드를 배포해서
각자의 실행환경에서 인터프리터를 이용해 한줄씩 코드를 번역하는식으로
프로그램을 실행하게 된다. 그러다보니 느리다.
이점은 한번 프로그램을 만들면 여러 플랫폼에서 동작가능하다는것.
소스코드를 배포하기 때문에 유저가 즉석에서 소스코드를 변경해서 실행하는것도 가능하다.
(브라우저 콘솔에서 바로 가능)

자바는 자바바이트코드로 컴파일되고, 그 코드를 배포해서 인터프리팅방식으로
프로그램을 실행하기때문에 멀티 플랫폼에서 동작가능하다. 

스크립팅언어는 프로그래밍 언어이기도 하다.

마크업언어는 제어문, 반복문을 이용한 서브루틴 없이 그저
화면에 요소를 보여주기 위한 언어다. 따라서 프로그래밍언어라고는 할 수 없다.


@ node js , web browser, JavaScript engine

자바스크립트를 해석하는 같은 v8 엔진을 사용하지만 브라우저/node.js 환경에서 사용할 수 있는 고유한 api 에서 차이가 있습니다.

(…생략) 브라우저와 Node.js는 존재 목적이 다르다. 브라우저는 HTML, CSS, 자바스크립트를 실행하여 웹 페이지를 화면에 렌더링하는 것이 주된 목적이지만, Node.js는 서버 개발 환경을 제공하는 것이 주된 목적이다. 따라서 브라우저와 Node.js 모두 자바스크립트의 코어인 ECMAScript를 실행할 수 있지만 브라우저와 Node.js에서 ECMAScript 이외에 추가적으로 제공하는 기능은 호환되지 않는다. -https://poiemaweb.com/js-hello-world 11

import/export 는 node.js 환경에서는 동작하지만, 대다수 브라우저에서는 지원하지 않아서
모듈화 등을 위해서 webpack 등과 같은 module bundler 를 사용해야 하는 것도 차이 중 하나입니다.

@ node.js
!! node는 프로그래밍 엔진이 아니다. 자바스크립트 런타임이다.
chrome은 내부에 v8 엔진을 포함한다.
node는 c++로 작성된 프로그램(.exe)이며, 내부에 v8엔진을 포함한다.
node는 자바스크립트를 이용해 chrome 같은 웹브라우저가
할 수 없는 것을 할 수 있게 만들어준다. 
v8 engine은 인터프리팅, 메모리힙, 콜스택 등을 제공한다.
chrome은 web api, callback queue, event loop 같은것을 제공한다.


쓰레드 기반 동기방식(Blocking I/O)

하나의 쓰레드가 request를 받으면 모든 처리가 완료될때까지 기다리다가 처리결과가 완료되면 다시 응답을 보냄
기존 업무 처리가 완료되기 전에 또다른 request가 있으면 새로운 쓰레드가 업무를 처리함.
동시 request가 많은 경우 많은 쓰레드가 필요하게 되어 서버 과부하
단일쓰레드 이벤트 루프 기반 비동기방식( Non-Blocking I/O)

하나의 쓰레드가 request를 받으면 바로 다음 처리에 요청을 보내놓고 다른 작업을 처리하다가 먼저 요청한 작업이 끝나면 이벤트를 받아서 응답을 보낸다.
동시 request가 오더라도 처리가 완료될때까지 기다리지 않아도 되기 때문에 서버 부하가 적다.




node는 자바스크립트로 서버를 만들기 위해 만들어졌고, 
non-blocking asyncronus(논 블로킹 비동기) 한 아키텍쳐를 가진다.
그와 비교해 asp.net은 blocking syncronus 하다. (비동기도 가능하지만 추가적인 작업필요)
즉, 멀티스레드로 동작하지만 각 스레드는 한번에 하나의 업무만을 한다.
모든 스레드가 busy하면 클라이언트가 멈출 수 있다.

만약 무거운 작업(파일 i/o, 이미지 프로세싱 등)을 한다면
node를 쓰지않는것이 좋다. 이 경우에는 멀티스레드가 나음.
왜냐하면 시분할방식이기 때문에 오래걸리는 작업은 준내 오래걸림. 

Node.js 가 어울리는 웹서비스
간단한 로직. 
대용량(동시에 여러 request를 처리)
빠른 응답시간 요구
빠른 개발 요구
비동기방식에 어울리는 서비스(네트워크 스트리밍 서비스, 채팅 서비스 등)
 
Node.js 가 어울리지 않는 웹서비스
단일 처리가 오래 걸리는 경우 : 싱글 쓰레드이기 때문
서버 체크로직이 많은 경우 : 비동기방식이기 때문에 CallBack Hell에 빠지지 않기 위해
업무 복잡도/난이도가 높은 경우 : 에러가 나면 서버가 죽기 때문에 코드 품질 중요


 https://www.youtube.com/watch?v=k2GWnDb5zoQ


@ javaScript vs ECMAScript
ECMA-262 는 Ecma 인터내셔널에 의해 제정된 하나의 기술 규격의 이름으로, 
범용 목적의 스크립트 언어에 대한 명세이다.

ECMAScript 는 는 Ecma 인터내셔널에 의해 제정된 
ECMA-262 기술 규격에 의해 정의된 범용 스크립트 언어이다.

javaScript 는JavaScript는 ECMAScript 사양을 준수하는 범용 
스크립팅 언어이다.

 만약 여러분이 ECMAScript 문서를 읽게 된다면, 
여러분은 어떻게 스크립트 언어를 만들 수 있는지를 알 수 있습니다. 
반면 여러분이 JavaScript 문서를 읽게 된다면, 
여러분은 어떻게 스크립트 언어를 쓸 수 있는지를 알 수 있습니다.





@ http 통신 vs 소켓통신


[ Http 통신의특징 ]
Client가 요청을 보내는 경우에만 Server가 응답하는 단방향 통신이다.

Server로부터 응답을 받은 후에는 연결이 바로 종료된다. 

실시간 연결이 아니고, 필요한 경우에만 Server로 요청을 보내는 상황에 유용하다.

요청을 보내 Server의 응답을 기다리는 어플리케이션(Android or Ios)의 개발에 주로 사용된다


[ Socket 통신의 특징 ]
Server와 Client가 계속 연결을 유지하는 양방향 통신이다.

Server와 Client가 실시간으로 데이터를 주고받는 상황이 필요한 경우에 사용된다.

실시간 동영상 Streaming이나 온라인 게임 등과 같은 경우에 자주 사용된다.

@ Sql vs NoSql

Nosql은 서버에 json 같은 형태로 데이터를 저장한다. sql 쿼리가 없어서
빠르긴 하지만 sql처럼 구조화되어있지 않아서 관리에 어려움이 있을 수 있다.

@ volley

http/ https 통신을 쉽게해주는 라이브러리.
안드로이드에서는 http통신을 막아놨다.
